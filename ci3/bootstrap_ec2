#!/bin/bash
source $(git rev-parse --show-toplevel)/ci3/source

cmd=${1:-"./bootstrap.sh ci"}
postfix=${2:-}
cores=${CORES:-128}
NO_TERMINATE=${NO_TERMINATE:-0}
BRANCH=${BRANCH:-$(git rev-parse --abbrev-ref HEAD)}

# Trap function to terminate our running instance when the script exits.
function on_exit {
    set +e
    if [ "$NO_TERMINATE" -eq 0 ]; then
      aws_terminate_instance $iid $sir
    else
      echo "Remote machine not terminated, connect with: ./ci.sh attach"
    fi
}

# Verify that the commit exists on the remote. It will be the remote tip of itself if so.
current_commit=$(git rev-parse HEAD)
if [[ "$(git fetch origin --negotiate-only --negotiation-tip=$current_commit)" != *"$current_commit"* ]]; then
  echo "Commit $current_commit is not pushed, exiting."
  exit 1
fi

instance_name=$(echo -n "$BRANCH" | tr -c 'a-zA-Z0-9-' '_')
[ -n "$postfix" ] && instance_name+="_$postfix"

echo_header "request build instance"
# Terminate any existing instance with the same name.
existing_instance=$(aws ec2 describe-instances \
  --region us-east-2 \
  --filters "Name=tag:Name,Values=$instance_name" \
  --query "Reservations[].Instances[?State.Name!='terminated'].InstanceId[]" \
  --output text)
if [ -n "$existing_instance" ]; then
  echo "Terminating existing instance: $existing_instance"
  aws ec2 --region us-east-2 terminate-instances --instance-ids $existing_instance > /dev/null 2>&1
fi

# Request new instance.
ip_sir=$(aws_request_instance $instance_name $cores x86_64)
parts=(${ip_sir//:/ })
ip="${parts[0]}"
sir="${parts[1]}"
iid="${parts[2]}"
trap on_exit EXIT

# If we're asking to not terminate the instance automatically, we also don't want to remove the container.
[ "$NO_TERMINATE" -eq 0 ] && docker_args+=" --rm"

# Interactive if stdin is connected to terminal.
if [ -t 0 ]; then
  docker_args+=" -i"
fi

# If stdout is connected to a terminal, drop into a shell on failure.
# Otherwise ensure all logs go to redis cache.
if [ -t 1 ]; then
  ssh_args="-t"
  docker_args+=" -t"
  cmd_postfix="|| exec zsh"
else
  cmd_postfix="2>&1 | ci3/add_timestamps | ci3/cache_log ${LOG_ID:-}"
fi

# Use ~/.ssh/build_instance_key to ssh into our requested instance.
# Launch our devbox container, clones the branches latest commit and runs the given command.
# To improve performance we:
#   - Use a volume on /var/lib/docker for docker-in-docker as overlayfs trashes performance (in fact it just breaks).
#   - The volume has the devbox image preloaded within it in the ami_update.sh script.
#   - Use a 16G tmpfs for the actual working directory in /home/aztec-dev/aztec-packages.
#   - Copy the CRS into a 3G tmpfs and mount that into the container.
#   - Mount the hosts /tmp into the container.
# We mount in aws credentials to leverage the s3 cache.
# We enable the test cache, which uses a redis instance for tracking test runs.
# We set SSH_CONNECTION to something to ensure the hostname is shown in the lean prompt.
# We provide the host user and group ids to the entrypoint script to ensure alignment.
# We raise the default pid limit to 32k.
ssh ${ssh_args:-} -F $ci3/aws/build_instance_ssh_config ubuntu@$ip "
  echo "Loading CRS into tmpfs..."
  sudo mkdir /mnt/bb-crs
  sudo mount -t tmpfs -o size=3G tmpfs /mnt/bb-crs
  sudo cp -r \$HOME/.bb-crs/* /mnt/bb-crs
  echo "Done in \$SECONDS seconds."

  echo "Starting devbox..."
  docker run --privileged ${docker_args:-} \
    --name aztec_build \
    --hostname $instance_name \
    -v bootstrap_ci_local_docker:/var/lib/docker \
    -v \$HOME/.aws:/home/aztec-dev/.aws:ro \
    -v /mnt/bb-crs:/home/aztec-dev/.bb-crs:ro \
    -v /tmp:/tmp \
    --tmpfs /home/aztec-dev/aztec-packages:size=16g,exec,uid=1000,gid=1000 \
    -e USE_TEST_CACHE=1 \
    -e CI_REDIS='ci-redis.lzka0i.0001.use2.cache.amazonaws.com' \
    -e SSH_CONNECTION=' ' \
    -e LOCAL_USER_ID=\$(id -u) \
    -e LOCAL_GROUP_ID=\$(id -g) \
    -e BUILD_SYSTEM_DEBUG=${BUILD_SYSTEM_DEBUG:-} \
    --pids-limit=32768 \
    $DEVBOX_IMAGE bash -c '
      set -euo pipefail
      # When restarting the container, just hang around.
      while [ -f started ]; do sleep 999; done
      touch started
      cd /home/aztec-dev/aztec-packages
      git init . &>/dev/null
      git remote add origin https://github.com/aztecprotocol/aztec-packages
      git fetch --depth 1 origin $current_commit
      git checkout FETCH_HEAD
      ci3/aws_handle_evict "$cmd ${cmd_postfix:-}"
    '
"
code=$?

# If we were spot evicted, try again using on-demand.
if [ $code -eq 155 ]; then
  NO_SPOT=1 $0
else
  exit $code
fi