#!/bin/bash
NO_CD=1 source $(git rev-parse --show-toplevel)/ci3/source

cmd=$1
# Remove the rebuild hash (first field) to leave the test command.
test_cmd="${cmd#* }"
key=$(hash_str "$cmd")

if [ "${USE_TEST_CACHE:-0}" -eq 1 ]; then
  log_key=$(redis-cli --raw -h $CI_REDIS GET $key)
  if [ -n "$log_key" ]; then
    log_info=" ${yellow}$log_key${reset}"
    echo -e "${blue}SKIPPED${reset}${log_info:-}: $test_cmd"
    exit 0
  fi
fi

# If the test has a verbose mode, we want it enabled.
export VERBOSE=1

# Run the test, capturing output, with a timeout of 10m.
set +e
output=$(timeout -v 600s bash -c "$test_cmd" 2>&1)
code=$?

if [ -n "$CI_REDIS" ]; then
  log_key=$(uuid)

  if [ $code -eq 0 ]; then
    # Set success flag for test. This key is unique to the test.
    redis-cli -h $CI_REDIS SETEX $key 604800 $log_key &>/dev/null
  fi

  # Set the test log. This key is globally unique.
  echo "$output" | redis-cli -h $CI_REDIS -x SETEX $log_key 604800 &>/dev/null
  log_info=" ${yellow}$log_key${reset}"
fi

if [ $code -eq 0 ]; then
  echo -e "${green}PASSED${reset}${log_info:-}: $test_cmd"
else
  echo -e "${red}FAILED${reset}${log_info:-}: $test_cmd (code: $code)"
  echo "$output"
  echo -e "${red}FAILED${reset}${log_info:-}: $test_cmd (code: $code)"
fi

exit $code