#!/bin/bash
# Use the minio script base. We ensure minio is running and wipe it.
source $(git rev-parse --show-toplevel)/ci3/cache/test_source

export DENOISE=1
# Tests the various modes of bootstrap test usage.
# We wrap and mock ci3/cache/should_run to detect when a test tries to run.
# We never return true, as we don't actually want to run tests here.
# - First, with CI=0, we assert that should_run returns true to each test.
# - Then, with CI=1, we assert that should_run returns true to each test, as it is a first pass.
# - Next, with CI=1, we assert that should_run returns false to each test, as it is a second pass.
# We mock ci3/cache/should_run for this purpose.
function run_cleanup() {
  rm -f $ci3/cache/download.bkup
  rm -f $ci3/cache/should_run.bkup
  git checkout -- $ci3/cache/should_run
  git checkout -- $ci3/cache/download
}
function exit_cleanup() {
  run_cleanup
  rm -f $ci3/cache/.test_failures
}
trap exit_cleanup EXIT

function run_bootstrap() {
  set +e
  project=$1
  cp $ci3/cache/should_run $ci3/cache/should_run.bkup
  cp $ci3/cache/download $ci3/cache/download.bkup
  cp $1 $ci3/cache/should_run
  cp $2 $ci3/cache/download
  rm -f $ci3/cache/.test_faillures

  TEST=1 USE_CACHE=1 $ci3/base/denoise $root/$project/bootstrap.sh
  exit_code=$?
  if [ "$exit_code" != 0 ]; then
    echo "Bootstrap had a bad exit code $exit_code."
    all_tests_passed=false
  fi
  run_cleanup
  exit $exit_code
}

function check_for_bad_asserts() {
  if [ -s "$ci3/cache/.test_faillures" ]; then
    echo "Failures detected:"
    cat "$ci3/cache/.test_faillures"
    all_tests_passed=false
    return 1
  fi
}

# Initialize the overall test status
all_tests_passed=true

function test_CI_0() {
  CI=0 run_bootstrap $1 $root/scripts/tests/bootstrap/should_run_first_pass.sh $root/scripts/tests/bootstrap/download_first_pass.sh
  check_for_bad_asserts
}

function test_CI_1_first_pass() {
  CI=1 run_bootstrap $1 $root/scripts/tests/bootstrap/should_run_first_pass.sh $root/scripts/tests/bootstrap/download_first_pass.sh
  check_for_bad_asserts
}

function test_CI_1_second_pass() {
  CI=1 run_bootstrap $1 $root/scripts/tests/bootstrap/should_run_second_pass.sh $root/scripts/tests/bootstrap/download_second_pass.sh
  check_for_bad_asserts
}

PROJECTS=(
  noir
  barretenberg
  l1-contracts
  avm-transpiler
  noir-projects
  yarn-project
  boxes
)

for project in "${PROJECTS[@]}"; do
  # Run the tests
  echo "$project test_CI_0"
  test_CI_0 $project | sed "s/^/$project test_CI_0: /" || (echo "$project test_CI_0 failure" && exit 1)
  echo "$project test_CI_0 success"
  echo "$project test_CI_1 pass 1"
  test_CI_1_first_pass $project | sed "s/^/$project test_CI_1 pass 1: /" || (echo "$project test_CI_0 failure" && exit 1)
  echo "$project test_CI_1 pass 2"
  test_CI_1_second_pass $project | sed "s/^/$project test_CI_0 pass 2: /" || (echo "$project test_CI_0 failure" && exit 1)
done

echo "All tests passed successfully."