// AUTOGENERATED FILE
#pragma once

#include <string_view>

#include "barretenberg/relations/relation_parameters.hpp"
#include "barretenberg/relations/relation_types.hpp"

namespace bb::avm2 {

template <typename FF_> class update_checkImpl {
  public:
    using FF = FF_;

    static constexpr std::array<size_t, 17> SUBRELATION_PARTIAL_LENGTHS = { 3, 3, 5, 4, 4, 4, 4, 3, 3,
                                                                            3, 3, 4, 3, 5, 5, 4, 4 };

    template <typename AllEntities> inline static bool skip(const AllEntities& in)
    {
        const auto& new_term = in;
        return (new_term.update_check_sel).is_zero();
    }

    template <typename ContainerOverSubrelations, typename AllEntities>
    void static accumulate(ContainerOverSubrelations& evals,
                           const AllEntities& new_term,
                           [[maybe_unused]] const RelationParameters<FF>&,
                           [[maybe_unused]] const FF& scaling_factor)
    {
        const auto constants_DEPLOYER_CONTRACT_ADDRESS = FF(2);
        const auto constants_UPDATED_CLASS_IDS_SLOT = FF(1);
        const auto constants_UPDATES_SHARED_MUTABLE_VALUES_LEN = FF(3);
        const auto constants_GENERATOR_INDEX__PUBLIC_LEAF_INDEX = FF(23);
        const auto update_check_BLOCKNUMBER_LT_BLOCK_OF_CHANGE =
            ((new_term.update_check_update_block_of_change - FF(1)) - new_term.update_check_blocknumber);
        const auto update_check_BLOCKNUMBER_GTE_BLOCK_OF_CHANGE =
            (new_term.update_check_blocknumber - new_term.update_check_update_block_of_change);

        {
            using Accumulator = typename std::tuple_element_t<0, ContainerOverSubrelations>;
            auto tmp = new_term.update_check_sel * (FF(1) - new_term.update_check_sel);
            tmp *= scaling_factor;
            std::get<0>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<1, ContainerOverSubrelations>;
            auto tmp = new_term.update_check_hash_not_zero * (FF(1) - new_term.update_check_hash_not_zero);
            tmp *= scaling_factor;
            std::get<1>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<2, ContainerOverSubrelations>;
            auto tmp = new_term.update_check_sel *
                       ((new_term.update_check_update_hash * ((FF(1) - new_term.update_check_hash_not_zero) *
                                                                  (FF(1) - new_term.update_check_update_hash_inv) +
                                                              new_term.update_check_update_hash_inv) -
                         FF(1)) +
                        (FF(1) - new_term.update_check_hash_not_zero));
            tmp *= scaling_factor;
            std::get<2>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<3, ContainerOverSubrelations>;
            auto tmp = new_term.update_check_sel * (FF(1) - new_term.update_check_hash_not_zero) *
                       new_term.update_check_update_delay;
            tmp *= scaling_factor;
            std::get<3>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<4, ContainerOverSubrelations>;
            auto tmp = new_term.update_check_sel * (FF(1) - new_term.update_check_hash_not_zero) *
                       new_term.update_check_update_pre_class;
            tmp *= scaling_factor;
            std::get<4>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<5, ContainerOverSubrelations>;
            auto tmp = new_term.update_check_sel * (FF(1) - new_term.update_check_hash_not_zero) *
                       new_term.update_check_update_post_class;
            tmp *= scaling_factor;
            std::get<5>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<6, ContainerOverSubrelations>;
            auto tmp = new_term.update_check_sel * (FF(1) - new_term.update_check_hash_not_zero) *
                       new_term.update_check_update_block_of_change;
            tmp *= scaling_factor;
            std::get<6>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<7, ContainerOverSubrelations>;
            auto tmp = new_term.update_check_sel *
                       (constants_UPDATED_CLASS_IDS_SLOT - new_term.update_check_updated_class_ids_slot);
            tmp *= scaling_factor;
            std::get<7>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<8, ContainerOverSubrelations>;
            auto tmp = new_term.update_check_sel *
                       ((new_term.update_check_shared_mutable_slot + constants_UPDATES_SHARED_MUTABLE_VALUES_LEN) -
                        new_term.update_check_shared_mutable_hash_slot);
            tmp *= scaling_factor;
            std::get<8>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<9, ContainerOverSubrelations>;
            auto tmp = new_term.update_check_sel * (constants_GENERATOR_INDEX__PUBLIC_LEAF_INDEX -
                                                    new_term.update_check_public_leaf_index_domain_separator);
            tmp *= scaling_factor;
            std::get<9>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<10, ContainerOverSubrelations>;
            auto tmp = new_term.update_check_sel *
                       (constants_DEPLOYER_CONTRACT_ADDRESS - new_term.update_check_deployer_protocol_contract_address);
            tmp *= scaling_factor;
            std::get<10>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<11, ContainerOverSubrelations>;
            auto tmp = new_term.update_check_sel *
                       (((update_check_BLOCKNUMBER_LT_BLOCK_OF_CHANGE - update_check_BLOCKNUMBER_GTE_BLOCK_OF_CHANGE) *
                             new_term.update_check_blocknumber_is_lt_block_of_change +
                         update_check_BLOCKNUMBER_GTE_BLOCK_OF_CHANGE) -
                        new_term.update_check_block_of_change_subtraction);
            tmp *= scaling_factor;
            std::get<11>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<12, ContainerOverSubrelations>;
            auto tmp = new_term.update_check_sel * (FF(32) - new_term.update_check_blocknumber_bit_size);
            tmp *= scaling_factor;
            std::get<12>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<13, ContainerOverSubrelations>;
            auto tmp =
                new_term.update_check_sel *
                ((new_term.update_check_update_pre_class * (new_term.update_check_update_pre_class_is_zero *
                                                                (FF(1) - new_term.update_check_update_pre_class_inv) +
                                                            new_term.update_check_update_pre_class_inv) -
                  FF(1)) +
                 new_term.update_check_update_pre_class_is_zero);
            tmp *= scaling_factor;
            std::get<13>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<14, ContainerOverSubrelations>;
            auto tmp =
                new_term.update_check_sel *
                ((new_term.update_check_update_post_class * (new_term.update_check_update_post_class_is_zero *
                                                                 (FF(1) - new_term.update_check_update_post_class_inv) +
                                                             new_term.update_check_update_post_class_inv) -
                  FF(1)) +
                 new_term.update_check_update_post_class_is_zero);
            tmp *= scaling_factor;
            std::get<14>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<15, ContainerOverSubrelations>;
            auto tmp = ((new_term.update_check_blocknumber_is_lt_block_of_change *
                             (new_term.update_check_original_class_id - new_term.update_check_update_pre_class) *
                             new_term.update_check_update_pre_class_is_zero +
                         new_term.update_check_update_pre_class) -
                        new_term.update_check_current_class_id);
            tmp *= scaling_factor;
            std::get<15>(evals) += typename Accumulator::View(tmp);
        }
        {
            using Accumulator = typename std::tuple_element_t<16, ContainerOverSubrelations>;
            auto tmp = (((FF(1) - new_term.update_check_blocknumber_is_lt_block_of_change) *
                             (new_term.update_check_original_class_id - new_term.update_check_update_post_class) *
                             new_term.update_check_update_post_class_is_zero +
                         new_term.update_check_update_post_class) -
                        new_term.update_check_current_class_id);
            tmp *= scaling_factor;
            std::get<16>(evals) += typename Accumulator::View(tmp);
        }
    }
};

template <typename FF> class update_check : public Relation<update_checkImpl<FF>> {
  public:
    static constexpr const std::string_view NAME = "update_check";

    static std::string get_subrelation_label(size_t index)
    {
        switch (index) {}
        return std::to_string(index);
    }
};

} // namespace bb::avm2