#!/usr/bin/env bash
set -euo pipefail

NETWORK=${NETWORK:-}
VERSION=${VERSION:-${NETWORK:-"latest"}}

# Take copy of command-line arguments, so we can mutate to parse.
args=("$@")
while [ "$#" -gt 0 ]; do
  case $1 in
    -p | --port)
      # Override default port exposed on container.
      AZTEC_PORT="$2"
      shift 2
      ;;
    --pxe.network)
      # Set version to user-specified network (e.g. 'devnet')
      VERSION="$2"
      echo "Using aztecprotocol/aztec:$VERSION"
      # Turn on proving if connecting to a network.
      export PXE_PROVER_ENABLED=1
      shift 2
      ;;
    *)
      shift
      ;;
  esac
done
# Reset positional args.
set -- "${args[@]}"

function get_env_vars {
  docker run --rm aztecprotocol/aztec cat /usr/src/yarn-project/foundation/src/config/env_var.ts |
    grep -oP "'\K[^']+(?=')" | tr '\n' ' '
}

# Function to parse the TypeScript file
function parse_ts_file {
  grep -oE "\| '[^']+'" "$LOCAL_TS_FILE" | sed "s/| '//; s/'//g" >"$LOCAL_ENV_VAR_FILE"
}

function cleanup {
  get_compose $@ down
}

CALLED_FROM=$PWD

# By default, force colors.
export FORCE_COLOR=${FORCE_COLOR:-1}

if [ "${1:-}" == "test" ]; then
  # Change working dir, so relative volume mounts are in the right place.
  cd $(dirname $0)/..
  # Compose file to use
  FILE_ARG="-f $HOME/.aztec/docker-compose.test.yml"

  # Set trap to catch SIGINT and call the cleanup function.
  trap "cleanup $FILE_ARG" SIGINT

  # Aztec contract test args for nargo
  export TEST_ARGS="$@ --silence-warnings --oracle-resolver http://txe:8081"
  export NARGO_FOREIGN_CALL_TIMEOUT=300000
  export WORKDIR=$CALLED_FROM
  get_compose -p aztec-test $FILE_ARG up --force-recreate --remove-orphans --abort-on-container-exit
elif [ $# == 2 ] && [ "$1" == "start" ] && [ "$2" == "--sandbox" ]; then
  # Change working dir, so relative volume mounts are in the right place.
  cd $(dirname $0)/..
  # Compose file to use
  FILE_ARG="-f $HOME/.aztec/docker-compose.sandbox.yml"

  # Set trap to catch SIGINT and call the cleanup function.
  trap "cleanup $FILE_ARG" SIGINT

  get_compose -p sandbox $FILE_ARG up --force-recreate --remove-orphans
elif [ "${1:-}" == "start" ]; then
  # export ENV_VARS_TO_INJECT=$(<.aztec_cli_vars)

  # Grab env vars from aztec project
  if [[ ! -f "$LOCAL_ENV_VAR_FILE" ]]; then
    echo "No env vars file found, creating one..."
    # Create temp container
    temp_container_id=$(docker create aztecprotocol/aztec:$VERSION)
    # Copy env vars file from container
    docker cp ${temp_container_id}:$TS_ENV_VAR_FILE $LOCAL_TS_FILE &> /dev/null
    # Remove temp container
    docker rm $temp_container_id &> /dev/null

    # Parse the TypeScript file
    parse_ts_file
    rm $LOCAL_TS_FILE
  fi

  # Read env vars from file
  readarray -t ENV_VARS_TO_INJECT <"$LOCAL_ENV_VAR_FILE"
  export ENV_VARS_TO_INJECT="${ENV_VARS_TO_INJECT[*]}"
  ENV_VARS_TO_INJECT="${ENV_VARS_TO_INJECT[*]}" INHERIT_USER=0 $(dirname $0)/.aztec-run aztecprotocol/aztec "$@"
elif [ "${1:-}" == "flamegraph" ]; then
  docker run -it \
    --entrypoint /usr/bin/flamegraph.sh \
    --env PROFILER_PATH=/usr/bin/noir-profiler \
    --env BACKEND_PATH=/usr/bin/bb \
    --env SERVE=${SERVE:-0} \
    $([ "${SERVE:-0}" == "1" ] && echo "-p 8000:8000" || echo "") \
    -v $(realpath $(dirname $2))/:/tmp \
    aztecprotocol/aztec-nargo:$VERSION /tmp/$(basename $2) $3
else
  ENV_VARS_TO_INJECT="SECRET_KEY" SKIP_PORT_ASSIGNMENT=1 $(dirname $0)/.aztec-run aztecprotocol/aztec "$@"
fi
