apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "chart.name" . }}-node
  labels:
    {{- include "chart.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "chart.name" . }}-node
  replicas: {{ .Values.node.replicas }}
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  selector:
    matchLabels:
      {{- include "chart.selectorLabels" . | nindent 6 }}
      app: node
  volumeClaimTemplates:
    - metadata:
        name: node-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.node.storageSize }}
  template:
    metadata:
      labels:
        {{- include "chart.selectorLabels" . | nindent 8 }}
        app: node
    spec:
      dnsPolicy: ClusterFirst
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      initContainers:
      {{- if .Values.initContainers }}
        {{- tpl (toYaml .Values.initContainers | nindent 8) $ }}
      {{- end }}
      {{- if .Values.nodePortEnabled }}
        - name: init-nodeport
          image: bitnami/kubectl
           command:
            - sh
            - -c
            - >
              export EXTERNAL_PORT=$(kubectl get services -l "pod in (${POD_NAME}), type in (p2p)" -o jsonpath='{.items[0].spec.ports[0].nodePort}');
              export EXTERNAL_IP=$(kubectl get nodes "${NODE_NAME}" -o jsonpath='{.status.addresses[?(@.type=="ExternalIP")].address}');
              echo "EXTERNAL_PORT=$EXTERNAL_PORT" >  /env/init-nodeport;
              echo "EXTERNAL_IP=$EXTERNAL_IP"     >> /env/init-nodeport;
              echo "P2P_IP=$EXTERNAL_IP"         >> /env/init-nodeport;
              echo "P2P_PORT=$EXTERNAL_PORT"     >> /env/init-nodeport;
              cat /env/init-nodeport;
      {{- end }}

      containers:
        - name: node
          image: {{ .Values.image }}
          command:
            - /bin/bash
            - -c
            - >
              {{- if .Values.nodePortEnabled }}
              source /env/init-nodeport;
              {{- end }}

              node --no-warnings /usr/src/yarn-project/aztec/dest/bin/index.js start --node --archiver

              {{- range .Values.node.extraArgs }}
                {{ tpl . $ }}
              {{- end }}
          startupProbe:
            httpGet:
              path: /status
              port: {{ .Values.fullNode.service.nodePort }}
            periodSeconds: {{ .Values.fullNode.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.fullNode.startupProbe.failureThreshold }}
          livenessProbe:
            httpGet:
              path: /status
              port: {{ .Values.fullNode.service.nodePort }}
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 30
            failureThreshold: 3
          volumeMounts:
            - name: node-data
              mountPath: {{ .Values.storage.dataDirectory }}
            {{- if .Values.nodePortEnabled }}
            - name: init-nodeport
              mountPath: /env
            {{- end }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: K8S_POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: OTEL_SERVICE_NAME
              value: node
            - name: K8S_NAMESPACE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NETWORK
              value: "{{ .Values.network.name }}"
            - name: NODE_OPTIONS
              value: "--max-old-space-size={{ .Values.nodeJs.maxOldSpaceSize}}"
            - name: AZTEC_PORT
              value: "{{ .Values.service.httpPort }}"
            - name: AZTEC_ADMIN_PORT
              value: "{{ .Values.service.admin.port }}"
            - name: LOG_LEVEL
              value: "{{ .Values.node.logLevel }}"
            - name: LOG_JSON
              value: "1"
            - name: P2P_ENABLED
              value: "{{ .Values.node.p2p.enabled }}"
            - name: COINBASE
              value: "{{ index .Values.node.validator.privateKey (int (regexFind "\\d+$" .metadata.name)) }}"
            - name: VALIDATOR_PRIVATE_KEY
              value: "{{ index .Values.node.validator.privateKey (int (regexFind "\\d+$" .metadata.name)) }}"

            ## TODO(md): Allow to be set independently of validator private key for prover configurations
            - name: SEQ_PUBLISHER_PRIVATE_KEY
              value: "{{ index .Values.node.validator.privateKey (int (regexFind "\\d+$" .metadata.name)) }}"
            - name: PROVER_PUBLISHER_PRIVATE_KEY
              value: "{{ index .Values.node.validator.privateKey (int (regexFind "\\d+$" .metadata.name)) }}"
            ## END TODO

            - name: VALIDATOR_DISABLED
              value: {{ .Values.node.validator.enabled | quote }}
            - name: L1_CHAIN_ID
              value: "{{ .Values.ethereum.chainId }}"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service.name={{ .Release.Name }},service.namespace={{ .Release.Namespace }},service.version={{ .Chart.AppVersion }},environment={{ .Values.environment | default "production" }}
            - name: DATA_DIRECTORY
              value: "{{ .Values.storage.dataDirectory }}"
            - name: DATA_STORE_MAP_SIZE_KB
              value: "{{ .Values.storage.dataStoreMapSize }}"
            - name: WS_DB_MAP_SIZE_KB
              value: "{{ .Values.storage.worldStateMapSize }}"
            - name: USE_GCLOUD_LOGGING
              value: "{{ .Values.metrics.useGcloudLogging }}"
            - name: OTEL_EXCLUDE_METRICS
              value: "{{ .Values.metrics.otelExcludeMetrics }}"
            - name: OTEL_EXPORTER_OTLP_METRICS_ENDPOINT
              value: "{{ .Values.metrics.otelCollectorEndpoint }}/v1/metrics"
            - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
              value: "{{ .Values.metrics.otelCollectorEndpoint }}/v1/traces"
            - name: OTEL_EXPORTER_OTLP_LOGS_ENDPOINT
              value: "{{ .Values.metrics.otelCollectorEndpoint }}/v1/logs"
            - name: SENTINEL_ENABLED
              value: "{{ .Values.node.sentinel.enabled }}"
            - name: BLOB_SINK_URL
              value: "{{ .Values.blobSink.url }}"
          ports:
            - containerPort: {{ .Values.service.httpPort }}
            - containerPort: {{ .Values.service.admin.port }}
            - containerPort: {{ .Values.service.p2p.port }}
            - containerPort: {{ .Values.service.p2p.port }}
              protocol: UDP
          resources:
            {{- toYaml .Values.node.resources | nindent 12 }}
      volumes:
        - name: node-data
          persistentVolumeClaim:
            claimName: node-data
        {{- if .Values.nodePortEnabled }}
        - name: init-nodeport
          configMap:
            name: init-nodeport
            emptyDir: {}
        {{- end }}

